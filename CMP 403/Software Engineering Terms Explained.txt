
WELCOME TO SOFTWARE ENGINEERING (CMP 413) MADE EASY

The Difference between a Plan-driven method and an Agile method
When you are asked to choice which of the software development method you would use to develop a software as an engineer, between these 2, here are things you need to know about them first

First of all, when picking a method, it boils down to how we personally plan, develop and respond to upgrading/updating.

In a Plan driven method (such as waterfall methodology), the requirements are well defined, without leaving any details before the development ever begins, using a sequential approach with deliverables at each stage is usually followed, these stages are:
- Requirements
- Design
- Development
- Testing,
- Deployment

Now the strengths or benefits of a Plan-Driven Method includes:
- Clear roadmap & predictable timelines: This is because the resource allocation is made alot easier.

- Makes it easier to manage large scale projects: This is because it has a structured approach, which ultimately helps managing large teams and its complexity.

- Best for well defined projects: Especially true when the requirement doesnt change, and the entire project scope is clear and concise.

and The Weakness or Disadvantages includes:
- Inflexibility to changes: Since we understand that it works best when the requirements are well defined, hence trying to change requirement will be very difficult.

- User Feedback is Limited until late stages: Now since the users are not actively carried along with the entire process, there is a very high percentage chance that the product wont be user-centered.

- Less responsive to market trends: One likely to miss the changing market needs opportunities because of the inability to adapt.

AGILE SOFTWARE DEVELOPMENT METHODS
This Agile Method (such as Scrum and Kanan) is primarily focused on a iterative development, which means back and forth development, and a continuous adaptation. This is totally based on users needs and market changes.

AGILE STRENGTHS/ADVANTAGES INCLUDES:
- Very adaptable to changes: Because of its iterative nature, changing of requirements and market trends are easier to be implemented.

- Frequent and early user feedback: Users feedback is gotten at each stage of the method.

- Faster to market: There is usually incremental releases which in return makes the product delivery faster.

NOW ITS WEAKNESS/DISADVANTAGES
- A level of High team collaboration and communication is required: when using this method, the success of the product being developed depends on the teams effective communication skills.

- Less Predictable Timelines: So because of the back anf forth iteration, it is difficult to predict when the product would be completely done with, or when each stage would be completed.

- Large-Scale Projects challenges: It would be difficult to manage a large team with its complexities.

agile methods
- the agile method has come to the conclusion of valuing working software over comprehend documentation
- individuals and interactions over tools and processes
- responding to change over following a plan


Now the little difference with an Agile and Plan-Driven Methodology is that:
If you are working with an organization that wants the requirement all completed and ready before launching into the next phase of development with a more structured team, then you need a plan-driven method...but
If the organization rather wants to be creating the software on an incremental level and get realistic feedback from users or stakeholders at each stage, then Agile Method is the way to go..

FOR A PLAN-DRIVEN DEVELOPMENT
Requirement Engineering > Requirement Specs > Design & Implementation (Requirement Changes Requests)

FOR AN AGILE DEVELOPMENT
Requirement Engineering > Design & Implementation


WELCOME TO THE EXTREME PROGRAMMING CYCLE
Select user stories > Turn user story to tasks > plan release > develop, integrate and test software > release software > evaluate system based on user's feedback


BUT WHAT IS Extreme Programming?
This is also known as Xp, which is an extension of Agile SDLC, understood that xtreme programming takes an extreme process whereby multiple version are created in a day, and tests are made in each build, having in mind that a test must be successful before any version is accepted..
 

Junit is a testing framework used to check for testing softwares in an extreme programming

SOFTWARE ENGINEERING EXPLAINED
This is typically a large field in computer science that entails the design, development, testing and maintenance of software applications.


WHAT IS A PROCESS MODEL
Process model is simply the graphical representation of a process or a workflow, which usually consists of several steps and activities that would arrive to a particular outcome.
The process model visually shows the flow of work, the interactions between different elements, and the decisions points within the process.

WHAT IS REQUIREMENT ELICITATION
Requirement Elicitation is just a term for the process of gathering informatativ  of stakeholders regarding their needs and expectations in building a software system, understanding these needs, and finally refining these needs and expectations. It is used to know how the software system is expected to function and its needs.

its goals are to simply:
- Understand the needs of the stakeholders
- Avoid Unnecessary reworking
- Define a clear and concise list requirements by create a Specific, Measureable, Achieveable, Relevant and Time-Bound requirement... remember this as the SMART requirements

The Techniques that can be used include:
- Interviews
- Workshops
- Survey
- Focus Groups
- Prototyping
- Document Analysis 

WHAT IS ENTHOGRAPHY
The idea of Enthography is to dig deeper into the needs of the users, including their behaviors and the context inwhich they want to use the software/system. It encompasses how the users interact with technology (or make use of technology) in their day to day lives.

WHAT IS SYSTEM ENGINEERING
Now similar to Software Engineering, System engineering is a broad field that entails the design, development, deployment, and final management of complex systems.

WHAT IS UML
UML means Unified Modelling Language, it is used for visualizing, specifying , constructing and documenting the artifact of a system.

TYPES OF UML DIAGRAMS
- Class Diagram: This diagram shows the classes in a system (That is during the development/coding phase) and their relationships such as inheritance, association, etc)

- Use Case Diagram: This illustrates how users or actors interact with the system to achieve and perform specfic goals and tasks.

- Sequence Diagrams: This illustrates the sequence of messages exchanged between the objects during an interaction.

- Activity Diagrams: this visually illustrates the workflow of a process or activity within a system.

- State Diagram: This visually explains the different state an object can be in and the transitions between them

- ER Diagram: Fully called an Entity Relationship Diagram which illustrates the relationship between entities and their attributes within a database system.