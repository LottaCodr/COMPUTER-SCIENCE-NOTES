CMP 401 PART B - THE STUDY

NOW LETS DESCRIBE THE SYNTAX
But first, lets analysis the problem of describing a syntax


For starters, we must agree that a language, whether natural or not, it is a combination of characters (or set of strings of characters) from some alphabets.

Now these set of strings of characters, when combined, are used to create a sentence or sentences.

and factually speaking, English has the most complex set of rules when creating a sentence. Meanwhile, for programming languages, no matter the level of complexity, it's syntax remains simple.

Now note that the lowest level syntactic units are called lexemes.

Lexemes usually includes operators, special units and numeric literals, amoung others.

These Lexemes are divided into groups which are already known to us as:
- Methods (functions)
- Variables names
- Keywords
- Operators
- Etc

Now the listed groups above are what we call IDENTIFIERS.. and each group is identified or presented as a name(token)
So we can easily say that Identifiers are group of Lexemes

Here comes the tricky part:
Al identifiers are Lexemes, but not all Lexemes are identifiers

These are examples of Identifiers:
- Const, MyFunction..

These are examples of Lexemes:
- x, +, Const, MyFunction....etc

With this, you would be able to spot the Lexemes and Identifers here
index = 2 * count + 17;

At the above code, everything is a Lexeme, but just few are Identifiers

LANGUAGE RECOGNISERS AND GENERATORS
First of all, Languages are in 2 ways
- Languages Recognition
- Language Generation

LANGUAGE RECOGNIZER
A recognizer is a device that checks the input of a language to determine whether the format in which the language is being written actually belongs to the Language in question.

Take an example, the Syntax Analyzer, it is a recognizer that checks whether a language is syntactically correct. It is also called a Parser (I mean the Syntax Analyser)

LANGUAGE GENERATOR
Just like the word says "Generators", they create, generate, produce strings that align with the grammatical structure that adheres to the rules of the language.

FORMAL METHODS OF DESCRIBING SYNTAX
The word "Grammer" refers to the mechanisms used to generate formal languages
Additionally, it is used to describe programming languages syntax

The most widely used methods are:
- Backus-Naur Form(BNF)
- Context-Free Grammar (CFG)

FUNDAMENTALS OF BNF
- Meta-Language: This just describes the language that is used to describe other languages. Note that Backus-Naur Form is a metalanguage.

The Non-terminal symbols of a BNF abstraction acts like syntactic variables and are used as syntactic structure classes.

Lets take this assignment statement below: <assign>→<var> =<expression>

THE BREAK DOWN OF THE ASSIGNMENT STATEMENT
<assign>: This is the non-terminal asbtract syntactic category that would define how the other symbols should be represented

→ : This one signifies the rewrite rule, showing how to expand the non-terminal symbol

<var>: This is another non-terminal symbol but of a low category that signifies where the rest of the values would be saved. It is equally called Variable.

= : This represents the assignment operator, and its a terminal system. 

<expression>: Finally, this represents another non-terminal symbol of a lower category, which is a valid expression.


The idea simply means, that its just a rule that dictates the structure of an assignment statement.
and non-terminal 

NOTE THIS:
The rule contains a RHS and LHS
- RHS(Right Hand Side): This contains things like Tokens, lexems and references to other abstractions (<var> =<expression>)
- LHS (Left Hand Side): Now this is the abstraction itself being defined (<assign>)

Also, multiple Definitions can be written as a rule, by seperating it with an OR/AND for example:
<if_stmt> → if ( <logic_expr> ) <stmt> | if ( <logic_expr> ) <stmt> else <stmt>

where the LHS is simply the non-terminal abstraction <if_stmt>


